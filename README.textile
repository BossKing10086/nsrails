h2. NSRails

Welcome! NSRails is a light-weight Objective-C library to make interfacing with a Rails back-end easy.


h3. What can NSRails do?

NSRails builds ActiveResource support straight into your Objective-C models, meaning CRUD operations and others can be called seamlessly via Objective-C methods.
This library is simple but flexible, meaning that it'll fit the various needs of your Rails project:
* Define only certain attributes to be shared with Rails
* Have different property and/or model names between Rails and Obj-C
* Nested models
* Basic HTTP authentication
* Asynchronous requests


h3. How do I get started?

Add the source folder into your Xcode project (making sure to copy files), and:
# Subclass NSRailsModel
# Declare the properties you want to share with Rails using the "NSRailsify":https://github.com/dingbat/nsrails/wiki/NSRailsify macro
# Create, get, destroy, and update Objective-C models with "one method call":https://github.com/dingbat/nsrails/wiki/NSRailsModel

For more details:
* See the "Wiki":https://github.com/dingbat/nsrails/wiki
* Documentation and screencast soon to come (promise)


h3. What's in the sources?

The main class in NSRails and the one to inherit from is "NSRailsModel":https://github.com/dingbat/nsrails/wiki/NSRailsModel (defined in NSRails.h). Also included is an "NSRConfig":https://github.com/dingbat/nsrails/wiki/NSRConfig class for global settings.

NSRails also makes use of the Objective-C JSON framework. The "ObjectiveResource":https://github.com/yfactorial/objectiveresource library was largely the inspiration for NSRails, and it was sad to see it lose support.