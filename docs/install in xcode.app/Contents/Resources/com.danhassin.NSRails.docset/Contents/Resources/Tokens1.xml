<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/NSRConfig.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/NSRConfig</TokenIdentifier>
			<Abstract type="html">The NSRails configuration class is NSRConfig, a class that stores your Rails app&apos;s configuration settings (server URL, etc) for either your app globally or in specific instances. It also supports basic HTTP authentication and can be subclassed to fit specific implementations.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setAutoinflectsClassNames:</TokenIdentifier>
			<Abstract type="html">When true, all Objective-C class names will have a default equivalence to their under_scored versions.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL autoinflectsClassNames</Declaration>
			
			
			<Anchor>//api/name/autoinflectsClassNames</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/autoinflectsClassNames</TokenIdentifier>
			<Abstract type="html">When true, all Objective-C class names will have a default equivalence to their under_scored versions.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL autoinflectsClassNames</Declaration>
			
			
			<Anchor>//api/name/autoinflectsClassNames</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setAutoinflectsPropertyNames:</TokenIdentifier>
			<Abstract type="html">When true, all Objective-C property names will have a default equivalence to their under_scored versions.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL autoinflectsPropertyNames</Declaration>
			
			
			<Anchor>//api/name/autoinflectsPropertyNames</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/autoinflectsPropertyNames</TokenIdentifier>
			<Abstract type="html">When true, all Objective-C property names will have a default equivalence to their under_scored versions.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL autoinflectsPropertyNames</Declaration>
			
			
			<Anchor>//api/name/autoinflectsPropertyNames</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setPerformsCompletionBlocksOnMainThread:</TokenIdentifier>
			<Abstract type="html">When true, the completion blocks passed into asynchronous remote methods will be called on the main thread.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL performsCompletionBlocksOnMainThread</Declaration>
			
			
			<Anchor>//api/name/performsCompletionBlocksOnMainThread</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/performsCompletionBlocksOnMainThread</TokenIdentifier>
			<Abstract type="html">When true, the completion blocks passed into asynchronous remote methods will be called on the main thread.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL performsCompletionBlocksOnMainThread</Declaration>
			
			
			<Anchor>//api/name/performsCompletionBlocksOnMainThread</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setManagesNetworkActivityIndicator:</TokenIdentifier>
			<Abstract type="html">The network activity indicator (gray spinning wheel on the status bar) will automatically turn on and off with requests.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL managesNetworkActivityIndicator</Declaration>
			
			
			<Anchor>//api/name/managesNetworkActivityIndicator</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/managesNetworkActivityIndicator</TokenIdentifier>
			<Abstract type="html">The network activity indicator (gray spinning wheel on the status bar) will automatically turn on and off with requests.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL managesNetworkActivityIndicator</Declaration>
			
			
			<Anchor>//api/name/managesNetworkActivityIndicator</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setIgnoresClassPrefixes:</TokenIdentifier>
			<Abstract type="html">When converting class names to their Rails equivalents, prefixes will be omitted.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL ignoresClassPrefixes</Declaration>
			
			
			<Anchor>//api/name/ignoresClassPrefixes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/ignoresClassPrefixes</TokenIdentifier>
			<Abstract type="html">When converting class names to their Rails equivalents, prefixes will be omitted.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL ignoresClassPrefixes</Declaration>
			
			
			<Anchor>//api/name/ignoresClassPrefixes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setSuccinctErrorMessages:</TokenIdentifier>
			<Abstract type="html">Cleaner error messages when generating NSError objects.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL succinctErrorMessages</Declaration>
			
			
			<Anchor>//api/name/succinctErrorMessages</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/succinctErrorMessages</TokenIdentifier>
			<Abstract type="html">Cleaner error messages when generating NSError objects.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL succinctErrorMessages</Declaration>
			
			
			<Anchor>//api/name/succinctErrorMessages</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setTimeoutInterval:</TokenIdentifier>
			<Abstract type="html">Timeout interval for HTTP requests.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) NSTimeInterval timeoutInterval</Declaration>
			
			
			<Anchor>//api/name/timeoutInterval</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/timeoutInterval</TokenIdentifier>
			<Abstract type="html">Timeout interval for HTTP requests.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) NSTimeInterval timeoutInterval</Declaration>
			
			
			<Anchor>//api/name/timeoutInterval</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setAppURL:</TokenIdentifier>
			<Abstract type="html">Root URL for your Rails server.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appURL</Declaration>
			
			
			<Anchor>//api/name/appURL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/appURL</TokenIdentifier>
			<Abstract type="html">Root URL for your Rails server.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appURL</Declaration>
			
			
			<Anchor>//api/name/appURL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setAppUsername:</TokenIdentifier>
			<Abstract type="html">Username for basic HTTP authentication (if used by server.)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appUsername</Declaration>
			
			
			<Anchor>//api/name/appUsername</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/appUsername</TokenIdentifier>
			<Abstract type="html">Username for basic HTTP authentication (if used by server.)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appUsername</Declaration>
			
			
			<Anchor>//api/name/appUsername</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setAppPassword:</TokenIdentifier>
			<Abstract type="html">Password for basic HTTP authentication (if used by server.)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appPassword</Declaration>
			
			
			<Anchor>//api/name/appPassword</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/appPassword</TokenIdentifier>
			<Abstract type="html">Password for basic HTTP authentication (if used by server.)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appPassword</Declaration>
			
			
			<Anchor>//api/name/appPassword</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setDateFormat:</TokenIdentifier>
			<Abstract type="html">Date format used if a property of type NSDate is encountered, to &quot;encode&quot; and &quot;decode&quot; NSDate objects.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *dateFormat</Declaration>
			
			
			<Anchor>//api/name/dateFormat</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/dateFormat</TokenIdentifier>
			<Abstract type="html">Date format used if a property of type NSDate is encountered, to &quot;encode&quot; and &quot;decode&quot; NSDate objects.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *dateFormat</Declaration>
			
			
			<Anchor>//api/name/dateFormat</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setManagedObjectContext:</TokenIdentifier>
			<Abstract type="html">Managed object context for CoreData support. (Required if CoreData is enabled)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSManagedObjectContext *managedObjectContext</Declaration>
			
			
			<Anchor>//api/name/managedObjectContext</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/managedObjectContext</TokenIdentifier>
			<Abstract type="html">Managed object context for CoreData support. (Required if CoreData is enabled)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSManagedObjectContext *managedObjectContext</Declaration>
			
			
			<Anchor>//api/name/managedObjectContext</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRConfig/defaultConfig</TokenIdentifier>
			<Abstract type="html">Returns the current default configuration.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>+ (NSRConfig *)defaultConfig</Declaration>
			
			<ReturnValue><Abstract type="html">The configuration set for the current environment.</Abstract></ReturnValue>
			<Anchor>//api/name/defaultConfig</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRConfig/setConfigAsDefault:</TokenIdentifier>
			<Abstract type="html">Sets the current default configuration to a custom-made config.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>+ (void)setConfigAsDefault:(NSRConfig *)config</Declaration>
			<Parameters>
				<Parameter>
					<Name>config</Name>
					<Abstract type="html">Config to be set as default for the current environment.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setConfigAsDefault:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRConfig/setConfig:asDefaultForEnvironment:</TokenIdentifier>
			<Abstract type="html">Sets a custom-made config to be the default for a given environment.
  </Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>+ (void)setConfig:(NSRConfig *)config asDefaultForEnvironment:(NSString *)environment</Declaration>
			<Parameters>
				<Parameter>
					<Name>config</Name>
					<Abstract type="html">Config to be set as default for environment.</Abstract>
				</Parameter><Parameter>
					<Name>environment</Name>
					<Abstract type="html">Environment identifier. Can be your own custom string or the constants NSRConfigEnvironmentDevelopment or NSRConfigEnvironmentProduction.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setConfig:asDefaultForEnvironment:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRConfig/configForEnvironment:</TokenIdentifier>
			<Abstract type="html">Returns the default configuration for a given environment</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>+ (NSRConfig *)configForEnvironment:(NSString *)environment</Declaration>
			<Parameters>
				<Parameter>
					<Name>environment</Name>
					<Abstract type="html">Environment identifier.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Configuration set for environment.</Abstract></ReturnValue>
			<Anchor>//api/name/configForEnvironment:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRConfig/setCurrentEnvironment:</TokenIdentifier>
			<Abstract type="html">Sets the global environment for NSRConfig.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>+ (void)setCurrentEnvironment:(NSString *)environment</Declaration>
			<Parameters>
				<Parameter>
					<Name>environment</Name>
					<Abstract type="html">Environment identifier. Can be your own custom string or the constants NSRConfigEnvironmentDevelopment or NSRConfigEnvironmentProduction.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCurrentEnvironment:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRConfig/currentEnvironment</TokenIdentifier>
			<Abstract type="html">Returns the identifier for the current global environment.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)currentEnvironment</Declaration>
			
			<ReturnValue><Abstract type="html">The identifier for the current global environment.</Abstract></ReturnValue>
			<Anchor>//api/name/currentEnvironment</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/use</TokenIdentifier>
			<Abstract type="html">Begins a context block of code to use the receiver as the default config.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/end</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)use</Declaration>
			
			
			<Anchor>//api/name/use</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/end</TokenIdentifier>
			<Abstract type="html">Ends a context block of code to use the receiver as the default config.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/use</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)end</Declaration>
			
			
			<Anchor>//api/name/end</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/useIn:</TokenIdentifier>
			<Abstract type="html">Executes a given block with the receiver as the default config in that block.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/use</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/end</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)useIn:(void ( ^ ) ( void ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">Block to be executed with the default config context of receiver.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/useIn:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/stringFromDate:</TokenIdentifier>
			<Abstract type="html">Returns a string representation of a given date formatted using dateFormat.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/dateFromString:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSString *)stringFromDate:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">The date to format.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/stringFromDate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/dateFromString:</TokenIdentifier>
			<Abstract type="html">Returns a date representation of a given string interpreted using dateFormat.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/stringFromDate:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSDate *)dateFromString:(NSString *)string</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract type="html">The string to parse.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/dateFromString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/initWithAppURL:</TokenIdentifier>
			<Abstract type="html">Initializes a new NSRConfig instance with an app URL.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>- (id)initWithAppURL:(NSString *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">App URL to be set to the new instance.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithAppURL:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/makeRequest:requestBody:route:sync:orAsync:</TokenIdentifier>
			<Abstract type="html">Makes a custom request. Returns the response string if synchronous; otherwise executes given block.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>- (id)makeRequest:(NSString *)httpVerb requestBody:(id)body route:(NSString *)route sync:(NSError **)error orAsync:(NSRHTTPCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>httpVerb</Name>
					<Abstract type="html">The HTTP method to use (GET, POST, PUT, DELETE, etc.)</Abstract>
				</Parameter><Parameter>
					<Name>body</Name>
					<Abstract type="html">Request body (needs to be a JSON parsable object, or will throw exception (NSDictionary, NSArray)).</Abstract>
				</Parameter><Parameter>
					<Name>route</Name>
					<Abstract type="html">The route to which the request will be made. This is appended to the appURL, so not the full URL. For instance, articles/1.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Pointer to an NSError object. Only used if completionBlock is NULL. May be NULL.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">If this parameter is not NULL, the request will be made asynchronously and this block will be executed when the request is complete. If this parameter is NULL, request will be made synchronously and the sync paramter may be used.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response representation (parsed from JSON), only if request is made synchronously. Otherwise, will return nil.</Abstract></ReturnValue>
			<Anchor>//api/name/makeRequest:requestBody:route:sync:orAsync:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/responseForRequestType:requestBody:url:sync:orAsync:</TokenIdentifier>
			<Abstract type="html">If you wish to define your own method of making a connection that&apos;s not HTTP (eg HTTPS), or include a custom header, etc, this is the method to override.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>- (id)responseForRequestType:(NSString *)httpVerb requestBody:(id)body url:(NSString *)url sync:(NSError **)error orAsync:(NSRHTTPCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>httpVerb</Name>
					<Abstract type="html">The HTTP method to use (GET, POST, PUT, DELETE, etc.)</Abstract>
				</Parameter><Parameter>
					<Name>body</Name>
					<Abstract type="html">Request body (needs to be a JSON parsable object, or will throw exception (NSDictionary, NSArray)).</Abstract>
				</Parameter><Parameter>
					<Name>url</Name>
					<Abstract type="html">The url to which the request will be made (full URL.)</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Pointer to an NSError object. Only used if completionBlock is NULL. May be NULL.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">If this parameter is not NULL, the request will be made asynchronously and this block will be executed when the request is complete. If this parameter is NULL, request will be made synchronously and the sync paramter may be used.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response representation (parsed from JSON), only if request is made synchronously. Otherwise, will return nil.</Abstract></ReturnValue>
			<Anchor>//api/name/responseForRequestType:requestBody:url:sync:orAsync:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/errorForResponse:statusCode:</TokenIdentifier>
			<Abstract type="html">(Typically only used when subclassing NSRConfig.) It is recommended to use this method after implementing your own request method, as it will generate some Rails-specific errors (like validation errors).</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>- (NSError *)errorForResponse:(id)jsonResponse statusCode:(NSInteger)statusCode</Declaration>
			<Parameters>
				<Parameter>
					<Name>jsonResponse</Name>
					<Abstract type="html">Response representation given by a server.</Abstract>
				</Parameter><Parameter>
					<Name>statusCode</Name>
					<Abstract type="html">Status code that was returned with the response.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Error if one could be extracted - otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/errorForResponse:statusCode:</Anchor>
		</Token>
		
	</File>
</Tokens>