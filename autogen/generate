#!/usr/bin/env ruby

require 'rubygems'
require 'active_support/inflector'

#bold text in terminal
START_B = "\033[1m"
END_B = "\033[0m"

def h(m)
  str = "#import \"NSRails.h\"\n\n@interface #{m[:name]} : NSRailsModel\n"
  m[:properties].each do |type, properties|
    str += "\n@property (nonatomic, strong) #{type} #{properties.map { |x| '*'+x}.join(', ')};"
  end
  str
end

def m(m)
  str = "#import \"#{m[:name]}.h\"\n\n@implementation #{m[:name]}"
  list = []
  if (list.count > 0)
    m[:properties].values.each do |v|
      list += v
    end
    str += "\n@synthesize #{list.join(', ')};"
  end
  str += "\nNSRailsSync(*"
  m[:belongs_tos].each do |bt_prop|
    str += ", #{bt_prop} -b"
  end
  m[:has_manys].each do |hm_dict|
    hm_dict.each do |hm_prop, hm|
      str += ", #{hm_prop}:#{hm}"
    end
  end
  str += ")"
end

def header(filename)
str = "//
//  #{filename}
//  #{@options[:project]}
"
if (!@options[:author])
  str += "//  File generated by NSRails AutoGen tool on #{@time}.\n"
else
  str += "//  Created by #{@options[:author]} on #{@time}.\n"
end
if (!@options[:company])
  if (@options[:author])
    company = @options[:author]
  else
    company = "__MyCompanyName__"
  end
elsif
  company = @options[:company]
end
str += "//  Copyright (c) #{Time.now.year.to_s} #{company}. All rights reserved.
//"
end

def run_script_with_args(args)
  path = nil

  @options = Hash.new
  args.each do |arg|
    if !path && arg != "--help"
      if (arg[arg.length] != "/"[0])
        arg += "/"
      end
      path = arg
    else
      begin
        var = arg[2..arg.length]
        equal_split = var.split('=')

        option = equal_split[0]
        while option["-"]
          option["-"] = "_"
        end
        if (option == "help")
          puts "\n#{START_B}#{END_B}=========================================================================="
          puts "------------------ #{START_B}Welcome to the NSRails autogen tool!#{END_B} ------------------"
          puts "This script will generate NSRails Objective-C classes (.m and .h) for you,\nbased on the models from any given Rails app."
          puts "=========================================================================="
          puts ""
          puts "Usage:"
          puts "   $ #{START_B}autogen/generate APP_PATH [options]#{END_B}"
          puts ""
          puts "Options for property translation:"
          puts "   #{START_B}--include-created-at#{END_B}        Will include the created_at date property (NSDate)"
          puts "   #{START_B}--include-updated-at#{END_B}        Will include the updated_at date property (NSDate)"
          puts "   #{START_B}--exclude-belongs-to-flag#{END_B}   On properties defined in Rails as belongs_to, will exclude '-b' flag"
          puts "   #{START_B}--use-mutable-arrays#{END_B}        Will use NSMutableArray instead of NSArray for has_many properties"
          puts ""
          puts "Options for file styling"
          puts "   #{START_B}--author=\"X\"#{END_B}                Metadata for 'Created by' header at the top of the files"
          puts "   #{START_B}--project=\"X\"#{END_B}               Metadata for the project header at the top of the files"
          puts "   #{START_B}--company=\"X\"#{END_B}               Metadata for 'Copyright' field header at the top of the files"
          puts "   #{START_B}--prefix=\"XX\"#{END_B}               Prefix for classes and filenames"
          puts ""
          puts ""
          return
        end
        value = (equal_split.count > 1 ? equal_split[1] : true)

        @options[option.to_sym] = value
      rescue
      end
    end
  end

  if !path
    raise "No path specified. See the bundled readme for this tool or use --help"
  end

  project_name = path.split("/").last

  begin
    schema = File.open(path+"db/schema.rb")
  rescue
    raise "Either '#{path}' isn't the root path to a Rails project or your db/schema.rb is misplaced."
  end

  output_path = "#{Dir.pwd}/#{project_name}-gen/"
  begin
    Dir.mkdir(output_path)
  rescue
  end
  puts "#{START_B}#{END_B}Writing files to '#{output_path}':"

  @options[:project] ||= project_name.camelize 
  @options[:prefix] ||= ""

  @time = Time.now.strftime("%m/%d/%Y")

  objc_conversions = {"integer" => "NSNumber", "string" => "NSString", "text" => "NSString", "datetime" => "NSDate"}
  while line = schema.gets()
    new_model = false
    if line =~ /create_table/
      new_model = true
      model_name = line.match(/create_table "(.*)",/).captures[0]
      @model = {:name => @options[:prefix]+model_name.classify, :model_name => model_name.singularize}
      @model[:properties] = Hash.new
      @model[:belongs_tos] = Array.new
      @model[:has_manys] = Array.new
    end
    next unless @model
    if line =~ /end/
      begin
        model_file = File.open(path+"app/models/#{@model[:model_name]}.rb")
        while line = model_file.gets()
          if (line.length > 0 && line[0] == "#"[0])
            next
          end
          match = nil

          #either "has_many :property" or "has_many :property, :through => :abc"
          #can't figure this out in regex right now so trying both...
          begin
            match = line.match(/ :(.*),/).captures
          rescue
            begin
              match = line.match(/ :(.*)/).captures
            rescue
              next
            end
          end

          prop = match[0].camelize(:lower)
          class_name = @options[:prefix]+prop.classify
          type = nil

          if line =~ /belongs_to/
            type = class_name
            if (!@options[:exclude_belongs_to_flag])
              @model[:belongs_tos] << prop
            end
          elsif line =~ /has_one/
            type = class_name
          elsif line =~ /has_many/
            if (@options[:use_mutable_arrays])
              type = "NSMutableArray"
            else
              type = "NSArray"
            end
            @model[:has_manys] << {prop => class_name}
          else
            next
          end

          @model[:properties][type] ||= []
          @model[:properties][type] << prop
        end
      rescue
      end

      ["h", "m"].each do |format|
        filename = @model[:name]+"."+format
        puts "  #{START_B}+#{END_B} #{filename}"
        File.open(output_path+filename, "w") do |file|
          file.puts(header(filename)+"\n\n")
          file.puts(eval("#{format}(@model)"))
          file.puts("\n@end")
        end
      end
      @model = nil
    elsif !new_model
      prop = line.match(/\"(.*?)\"/).captures[0]
      unless (prop =~ /_id/)
        if (prop == "created_at" && !@options[:include_created_at])
          next
        end
        if (prop == "updated_at" && !@options[:include_updated_at])
          next
        end

        schema_type = line.match(/t.(.*?)\"/).captures[0].strip
        prop = prop.camelize(:lower)
        type = objc_conversions[schema_type]

        @model[:properties][type] ||= []
        @model[:properties][type] << prop
      end
    end
  end
end

puts ""
run_script_with_args(ARGV)
puts ""