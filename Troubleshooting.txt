Trouble no more!

==================
Nesting Models FAQ
==================

1.  I entered a nested model class ("Brain") but it won't update in Rails when I update the original class ("Person").

	=> Rails-side: Make sure that the original model implements "accepts_nested_attributes_for" for the nested model.
		accepts_nested_attributes_for :brain
	
	=> iOS-side: If it's a has_many relationship and the related object in Obj-C is an array, make sure you declare what kind of object each will be in the RailsShare() method: 
		RailsShare("thoughts:Thought")
	
	
	
2.  I have a nested class ("Brain") that won't refresh when I getRemoteLatest the original class ("Person").

	=> Rails-side: Make sure that the People controller includes these attributes on the json render (in Show and Create methods):
			"render :json => @person.to_json(:include => {:brain})"
		If Brain has_many other things, you can include it with a nifty trick like so:
			"render :json => @person.to_json(:include => {:brain => {:include => :thoughts}})"
		
	=> iOS-side: Same answer as #1. Note that if the nested class isn't declared ( RS("thoughts") instead of RS("thoughts:Thought") ), NSRails will enter NSDictionaries with the nested model's attributes received from Rails into the array.
	
	
	
3.  I want to remove a nested model relation ("Thought") when I update the original class, but just removing the item from the  array ("thoughts" array in obj-c) won't do anything.

	=> Yes, if Rails doesn't see these individual Thoughts inside the "thoughts" array, it won't remove them - that array is purely additive (whatever comes in the "thoughts_attributes" array will only be added (unless the ID's are already defined, which they are through NSRails)), so you must send these Thoughts in and mark them for delete.
	
	==> Rails-side: set the ":allow_destroy" option on "accepts_nested_attributes_for" to be true (false by default).
			Example for the Brain model:
				accepts_nested_attributes_for :thoughts, :allow_destroy => true
		
	==> iOS-side: Set each nested object's "destroyOnNesting" property (inherited from RailsModel) to be true.
			Example to clear all thoughts from a brain:
				for (Thought *thought in brain.thoughts)
					thought.destroyOnNesting = YES;
				
				[brain updateRemote];