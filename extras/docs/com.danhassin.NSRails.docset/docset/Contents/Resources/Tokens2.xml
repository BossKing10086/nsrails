<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/NSRailsModel.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/NSRailsModel</TokenIdentifier>
			<Abstract type="html">### Summary</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/setRemoteID:</TokenIdentifier>
			<Abstract type="html">The corresponding local property for id.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSNumber *remoteID</Declaration>
			
			
			<Anchor>//api/name/remoteID</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRailsModel/remoteID</TokenIdentifier>
			<Abstract type="html">The corresponding local property for id.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSNumber *remoteID</Declaration>
			
			
			<Anchor>//api/name/remoteID</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/setRemoteAttributes:</TokenIdentifier>
			<Abstract type="html">The most recent dictionary of all properties returned by Rails, exactly as it returned it. (read-only)</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSDictionary *remoteAttributes</Declaration>
			
			
			<Anchor>//api/name/remoteAttributes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRailsModel/remoteAttributes</TokenIdentifier>
			<Abstract type="html">The most recent dictionary of all properties returned by Rails, exactly as it returned it. (read-only)</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSDictionary *remoteAttributes</Declaration>
			
			
			<Anchor>//api/name/remoteAttributes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/setRemoteDestroyOnNesting:</TokenIdentifier>
			<Abstract type="html">If true, will remotely destroy this object if sent nested.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL remoteDestroyOnNesting</Declaration>
			
			
			<Anchor>//api/name/remoteDestroyOnNesting</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRailsModel/remoteDestroyOnNesting</TokenIdentifier>
			<Abstract type="html">If true, will remotely destroy this object if sent nested.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL remoteDestroyOnNesting</Declaration>
			
			
			<Anchor>//api/name/remoteDestroyOnNesting</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRailsModel/remoteAll:</TokenIdentifier>
			<Abstract type="html">Returns an array of all remote objects (as instances of receiver&apos;s class.) Each instance’s properties will be set to those returned by Rails.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>+ (NSArray *)remoteAll:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSArray of instances of receiver&apos;s class. Each object’s properties will be set to those returned by Rails.</Abstract></ReturnValue>
			<Anchor>//api/name/remoteAll:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRailsModel/remoteAllAsync:</TokenIdentifier>
			<Abstract type="html">Retrieves an array of all remote objects (as instances of receiver&apos;s class.) Each instance’s properties will be set to those returned by Rails.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>+ (void)remoteAllAsync:(NSRGetAllCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteAllAsync:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRailsModel/remoteObjectWithID:error:</TokenIdentifier>
			<Abstract type="html">Returns an instance of receiver&apos;s class corresponding to the remote object with that ID.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>+ (id)remoteObjectWithID:(NSInteger)objectID error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectID</Name>
					<Abstract type="html">The ID of the remote object.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Instance of receiver&apos;s class with properties from the remote object with that ID.</Abstract></ReturnValue>
			<Anchor>//api/name/remoteObjectWithID:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRailsModel/remoteObjectWithID:async:</TokenIdentifier>
			<Abstract type="html">Retrieves an instance receiver&apos;s class corresponding to the remote object with that ID.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>+ (void)remoteObjectWithID:(NSInteger)objectID async:(NSRGetObjectCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectID</Name>
					<Abstract type="html">The ID of the remote object.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteObjectWithID:async:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRailsModel/remoteGET:error:</TokenIdentifier>
			<Abstract type="html">Returns the JSON response for a GET request to a custom method.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)remoteGET:(NSString *)customRESTMethod error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">Custom REST method to be called on the subclass&apos;s controller. If nil, will route to index.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSString response (in JSON).</Abstract></ReturnValue>
			<Anchor>//api/name/remoteGET:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRailsModel/remoteGET:async:</TokenIdentifier>
			<Abstract type="html">Makes a GET request to a custom method.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>+ (void)remoteGET:(NSString *)customRESTMethod async:(NSRHTTPCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">Custom REST method to be called on the subclass&apos;s controller. If nil, will route to index.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteGET:async:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRailsModel/remoteRequest:method:bodyAsObject:error:</TokenIdentifier>
			<Abstract type="html">Returns the JSON response for a request with a custom method, sending an NSRailsModel subclass instance as the body.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)remoteRequest:(NSString *)httpVerb method:(NSString *)customRESTMethod bodyAsObject:(NSRailsModel *)obj error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>httpVerb</Name>
					<Abstract type="html">The HTTP method to use (GET, POST, PUT, DELETE, etc.)</Abstract>
				</Parameter><Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">Custom REST method to be called on the subclass&apos;s controller. If nil, will route to index.</Abstract>
				</Parameter><Parameter>
					<Name>obj</Name>
					<Abstract type="html">NSRailsModel subclass instance - object you want to send in the body.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSString response (in JSON).</Abstract></ReturnValue>
			<Anchor>//api/name/remoteRequest:method:bodyAsObject:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRailsModel/remoteRequest:method:bodyAsObject:async:</TokenIdentifier>
			<Abstract type="html">Makes a request with a custom method, sending an NSRailsModel subclass instance as the body.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>+ (void)remoteRequest:(NSString *)httpVerb method:(NSString *)customRESTMethod bodyAsObject:(NSRailsModel *)obj async:(NSRHTTPCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>httpVerb</Name>
					<Abstract type="html">The HTTP method to use (GET, POST, PUT, DELETE, etc.)</Abstract>
				</Parameter><Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">Custom REST method to be called on the subclass&apos;s controller. If nil, will route to index.</Abstract>
				</Parameter><Parameter>
					<Name>obj</Name>
					<Abstract type="html">NSRailsModel subclass instance - object you want to send in the body.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteRequest:method:bodyAsObject:async:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRailsModel/remoteRequest:method:body:error:</TokenIdentifier>
			<Abstract type="html">Returns the JSON response for a request with a custom method.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)remoteRequest:(NSString *)httpVerb method:(NSString *)customRESTMethod body:(NSString *)body error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>httpVerb</Name>
					<Abstract type="html">The HTTP method to use (GET, POST, PUT, DELETE, etc.)</Abstract>
				</Parameter><Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">The REST method to call (appended to the route). If nil, will call index. See above for examples.</Abstract>
				</Parameter><Parameter>
					<Name>body</Name>
					<Abstract type="html">Request body.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Response string (in JSON).</Abstract></ReturnValue>
			<Anchor>//api/name/remoteRequest:method:body:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRailsModel/remoteRequest:method:body:async:</TokenIdentifier>
			<Abstract type="html">Makes a request with a custom method.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>+ (void)remoteRequest:(NSString *)httpVerb method:(NSString *)customRESTMethod body:(NSString *)body async:(NSRHTTPCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>httpVerb</Name>
					<Abstract type="html">The HTTP method to use (GET, POST, PUT, DELETE, etc.)</Abstract>
				</Parameter><Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">The REST method to call (appended to the route). If nil, will call index. See above for examples.</Abstract>
				</Parameter><Parameter>
					<Name>body</Name>
					<Abstract type="html">Request body.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteRequest:method:body:async:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteFetch:</TokenIdentifier>
			<Abstract type="html">Retrieves the latest remote data for receiver and sets its properties to received response.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteFetch:changes:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BOOL)remoteFetch:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if fetch was successful. Returns NO if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/remoteFetch:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteFetch:changes:</TokenIdentifier>
			<Abstract type="html">Retrieves the latest remote data for receiver and sets its properties to received response.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteFetch:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BOOL)remoteFetch:(NSError **)error changes:(BOOL *)changesPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter><Parameter>
					<Name>changesPtr</Name>
					<Abstract type="html">Pointer to boolean value set to whether or not the receiver changed in any way after the fetch (ie, if this fetch modified one of receiver&apos;s local properties due to a change in value server-side). This will also take into account diffs to any nested NSRailsModel objects that are affected by this fetch (done recursively).

Note that because this only tracks differences in local changes, properties that changed server-side that are not defined in the receiver&apos;s class will not report back a change (ie, if receiver&apos;s class doesn&apos;t implement an updatedat property and updatedat is changed in your remote DB, no change will be reported.) This parameter may be NULL if this information is not useful, or use remoteFetch:.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if fetch was successful. Returns NO if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/remoteFetch:changes:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteFetchAsync:</TokenIdentifier>
			<Abstract type="html">Retrieves the latest remote data for receiver and sets its properties to received response.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (void)remoteFetchAsync:(NSRGetLatestCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete. The second parameter passed in is a BOOL whether or not there was a local change. This means changes in updated_at, etc, will only apply if your Objective-C class implement this as a property as well. This also applies when updating any of its nested objects (done recursively).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteFetchAsync:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteUpdate:</TokenIdentifier>
			<Abstract type="html">Updates receiver&apos;s corresponding remote object.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (BOOL)remoteUpdate:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if update was successful. Returns NO if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/remoteUpdate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteUpdateAsync:</TokenIdentifier>
			<Abstract type="html">Updates receiver&apos;s corresponding remote object.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (void)remoteUpdateAsync:(NSRBasicCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteUpdateAsync:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteCreate:</TokenIdentifier>
			<Abstract type="html">Creates the receiver remotely. Receiver&apos;s properties will be set to those given by Rails (including remoteID.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (BOOL)remoteCreate:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if create was successful. Returns NO if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/remoteCreate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteCreateAsync:</TokenIdentifier>
			<Abstract type="html">Creates the receiver remotely. Receiver&apos;s properties will be set to those given by Rails (including remoteID.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (void)remoteCreateAsync:(NSRBasicCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteCreateAsync:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteDestroy:</TokenIdentifier>
			<Abstract type="html">Destroys receiver&apos;s corresponding remote object. Local object will be unaffected.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (BOOL)remoteDestroy:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if destroy was successful. Returns NO if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/remoteDestroy:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteDestroyAsync:</TokenIdentifier>
			<Abstract type="html">Destroys receiver&apos;s corresponding remote object. Local object will be unaffected.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (void)remoteDestroyAsync:(NSRBasicCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteDestroyAsync:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteGET:error:</TokenIdentifier>
			<Abstract type="html">Returns the JSON response for a GET request to a custom method.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (NSString *)remoteGET:(NSString *)customRESTMethod error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">Custom REST method to be called on the remote object corresponding to the receiver. If nil, will route to only the receiver (objects/1.json).</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSString response (in JSON).</Abstract></ReturnValue>
			<Anchor>//api/name/remoteGET:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteGET:async:</TokenIdentifier>
			<Abstract type="html">Makes a GET request to a custom method.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (void)remoteGET:(NSString *)customRESTMethod async:(NSRHTTPCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">Custom REST method to be called on the remote object corresponding to the receiver. If nil, will route to only the receiver (objects/1.json).</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteGET:async:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteRequest:method:error:</TokenIdentifier>
			<Abstract type="html">Returns the JSON response for a request with a custom method, sending the JSON representation of the receiver as the request body.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (NSString *)remoteRequest:(NSString *)httpVerb method:(NSString *)customRESTMethod error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>httpVerb</Name>
					<Abstract type="html">The HTTP method to use (GET, POST, PUT, DELETE, etc.)</Abstract>
				</Parameter><Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">Custom REST method to be called on the remote object corresponding to the receiver. If nil, will route to only the receiver (objects/1.json).</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSString response (in JSON).</Abstract></ReturnValue>
			<Anchor>//api/name/remoteRequest:method:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteRequest:method:async:</TokenIdentifier>
			<Abstract type="html">Makes a request with a custom method, sending the JSON representation of the receiver as the request body.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (void)remoteRequest:(NSString *)httpVerb method:(NSString *)customRESTMethod async:(NSRHTTPCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>httpVerb</Name>
					<Abstract type="html">The HTTP method to use (GET, POST, PUT, DELETE, etc.)</Abstract>
				</Parameter><Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">Custom REST method to be called on the remote object corresponding to the receiver. If nil, will route to only the receiver (objects/1.json).</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteRequest:method:async:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteRequest:method:body:error:</TokenIdentifier>
			<Abstract type="html">Returns the JSON response for a request with a custom method on the receiver&apos;s corresponding remote object.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (NSString *)remoteRequest:(NSString *)httpVerb method:(NSString *)customRESTMethod body:(NSString *)body error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>httpVerb</Name>
					<Abstract type="html">The HTTP method to use (GET, POST, PUT, DELETE, etc.)</Abstract>
				</Parameter><Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">The REST method to call (appended to the route). If nil, will call index. See above for examples.</Abstract>
				</Parameter><Parameter>
					<Name>body</Name>
					<Abstract type="html">Request body.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Response string (in JSON).</Abstract></ReturnValue>
			<Anchor>//api/name/remoteRequest:method:body:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteRequest:method:body:async:</TokenIdentifier>
			<Abstract type="html">Makes a request with a custom method on the receiver&apos;s corresponding remote object.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (void)remoteRequest:(NSString *)httpVerb method:(NSString *)customRESTMethod body:(NSString *)body async:(NSRHTTPCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>httpVerb</Name>
					<Abstract type="html">The HTTP method to use (GET, POST, PUT, DELETE, etc.)</Abstract>
				</Parameter><Parameter>
					<Name>customRESTMethod</Name>
					<Abstract type="html">The REST method to call (appended to the route). If nil, will call index. See above for examples.</Abstract>
				</Parameter><Parameter>
					<Name>body</Name>
					<Abstract type="html">Request body.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/remoteRequest:method:body:async:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/remoteJSONRepresentation</TokenIdentifier>
			<Abstract type="html">Serializes the receiver&apos;s properties into a JSON string.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (NSString *)remoteJSONRepresentation</Declaration>
			
			<ReturnValue><Abstract type="html">The receiver&apos;s properties as a JSON string (takes into account rules in NSRailsSync).</Abstract></ReturnValue>
			<Anchor>//api/name/remoteJSONRepresentation</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/dictionaryOfRemoteProperties</TokenIdentifier>
			<Abstract type="html">Serializes the receiver&apos;s properties into a dictionary.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)dictionaryOfRemoteProperties</Declaration>
			
			<ReturnValue><Abstract type="html">The receiver&apos;s properties as a dictionary (takes into account rules in NSRailsSync).</Abstract></ReturnValue>
			<Anchor>//api/name/dictionaryOfRemoteProperties</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/setPropertiesUsingRemoteJSON:</TokenIdentifier>
			<Abstract type="html">Sets the receiver&apos;s properties given a JSON string.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (BOOL)setPropertiesUsingRemoteJSON:(NSString *)json</Declaration>
			<Parameters>
				<Parameter>
					<Name>json</Name>
					<Abstract type="html">JSON string to be evaluated, typically from the Rails output from a previous request.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if any changes were made to the local object, NO if object was identical before/after.</Abstract></ReturnValue>
			<Anchor>//api/name/setPropertiesUsingRemoteJSON:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/setPropertiesUsingRemoteDictionary:</TokenIdentifier>
			<Abstract type="html">Sets the receiver&apos;s properties given a dictionary.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (BOOL)setPropertiesUsingRemoteDictionary:(NSDictionary *)dictionary</Declaration>
			<Parameters>
				<Parameter>
					<Name>dictionary</Name>
					<Abstract type="html">Dictionary to be evaluated.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if any changes were made to the local object, NO if object was identical before/after.</Abstract></ReturnValue>
			<Anchor>//api/name/setPropertiesUsingRemoteDictionary:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/initWithRemoteJSON:</TokenIdentifier>
			<Abstract type="html">Initializes a new instance of the receiver&apos;s class with a given JSON input.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (id)initWithRemoteJSON:(NSString *)json</Declaration>
			<Parameters>
				<Parameter>
					<Name>json</Name>
					<Abstract type="html">JSON string to be evaluated, typically from the Rails output from a previous request.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if any changes were made to the local object, NO if object was identical before/after.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithRemoteJSON:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/initWithRemoteDictionary:</TokenIdentifier>
			<Abstract type="html">Initializes a new instance of the receiver&apos;s class with a given dictionary input.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (id)initWithRemoteDictionary:(NSDictionary *)dictionary</Declaration>
			<Parameters>
				<Parameter>
					<Name>dictionary</Name>
					<Abstract type="html">Dictionary to be evaluated.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if any changes were made to the local object, NO if object was identical before/after.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithRemoteDictionary:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/initWithCustomSyncProperties:</TokenIdentifier>
			<Abstract type="html">Initializes a new instance of the receiver&apos;s class with a custom NSRailsSync string.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (id)initWithCustomSyncProperties:(NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">String to become this instance&apos;s NSRailsSync - pass as you would an NSRailsSync string (see above).</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if any changes were made to the local object, NO if object was identical before/after.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithCustomSyncProperties:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRailsModel/initWithCustomSyncProperties:customConfig:</TokenIdentifier>
			<Abstract type="html">Initializes a new instance of the receiver&apos;s class with a custom NSRailsSync string and config.</Abstract>
			<DeclaredIn>NSRails.h</DeclaredIn>			
			
			<Declaration>- (id)initWithCustomSyncProperties:(NSString *)str customConfig:(NSRConfig *)config</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">String to become this instance&apos;s NSRailsSync - pass as you would an NSRailsSync string (see above).</Abstract>
				</Parameter><Parameter>
					<Name>config</Name>
					<Abstract type="html">Config to become this instance&apos;s config.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if any changes were made to the local object, NO if object was identical before/after.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithCustomSyncProperties:customConfig:</Anchor>
		</Token>
		
	</File>
</Tokens>